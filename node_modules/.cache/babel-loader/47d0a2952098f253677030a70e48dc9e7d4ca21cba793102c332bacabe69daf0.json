{"ast":null,"code":"// import Qs from 'qs'\nimport axios from'axios';var baseURL='/api';/* 服务器返回数据的的类型，根据接口文档确定 */function getToken(){return'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyRXh0SW5mbyI6IntcIm1vYmlsZVwiOlwiMTMzMzMzMzMzMzNcIixcInRlbmFudElkXCI6XCIxMDAwXCIsXCJ1c2VyTmFtZVwiOlwidGVzdFwifSIsImV4cCI6MTY5OTQ0MjUwMiwidXNlcklkIjoiYWE5ZDljNTE3ZGRmMTFlZWI0MTdmYTE2M2U0Zjk0NjUifQ.35VkZ1q-hYEGCn0pLtb--vahOFbmxAjeU8M8rplJcYc';}// 创建axios实例\nvar service=axios.create({baseURL:baseURL,timeout:30000,withCredentials:true});var ContentType={json:'application/json;charset=utf-8',// json格式\nform:'application/x-www-form-urlencoded;charset=UTF-8',// 表单\nmultipart:'multipart/form-data'// 文件上传\n};// service.defaults.headers.post['Content-Type'] = ContentType.form\nservice.defaults.headers.post['Content-Type']=ContentType.json;service.defaults.headers.put['Content-Type']=ContentType.json;// 声明一个 Map 用于存储每个请求的标识 和 取消函数\nvar pending=new Map();/**\r\n * @description: 添加请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */var addPending=function addPending(config){var url=[config.baseURL,config.method,config.url].join('');config.cancelToken=new axios.CancelToken(function(cancel){if(!pending.has(url)){// 如果 pending 中不存在当前请求，则添加进去\npending.set(url,cancel);}});};/**\r\n * @description: 移除请求\r\n *   移除未响应完的相同请求，避免重复请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */var removePending=function removePending(config){var url=[config.baseURL,config.method,config.url].join('');if(pending.has(url)){var cancel=pending.get(url);cancel(url);pending.delete(url);}};/**\r\n * 请求拦截器\r\n */service.interceptors.request.use(function(config){removePending(config);// 在请求开始前，移除未响应完的相同请求，避免重复请求\naddPending(config);// 将当前请求添加到 pending 中\n// console.log('请求拦截器getToken:', getToken())\nif(getToken()){config.headers.Authorization=getToken();}return config;},function(error){console.log('请求异常',error);// 错误抛到业务代码\nerror.data={};error.data.code=-1;error.data.message='发送请求出现异常！';return Promise.reject(error);});/**\r\n * 响应拦截\r\n */service.interceptors.response.use(function(response){removePending(response);// 在请求结束后，移除本次请求\nif(response.status===200){// 请求结果正常\nvar code=response.data.code;// console.log(response, 'response.data')\nif(code===0){// 请求成功\nreturn Promise.resolve(response.data.data);}else{// 请求异常处理\n// 处理系统自定义异常\nreturn Promise.reject(response.data);}}else{console.log('响应请求异常',response);return Promise.reject(response);}},function(error){if(axios.isCancel(error)){// 重复请求的错误\n// 中断promise\nreturn new Promise(function(){});}console.log('响应请求出现异常！',error);// 错误抛到业务代码\nerror.data={};error.data.code=-2;error.data.message='响应请求出现异常！';return Promise.reject(error.data);});/* 导出封装的请求方法 */export var request={get:function get(url,config){return service.get(url,config);},post:function post(url,data,config){return service.post(url,data,config);},put:function put(url,data,config){return service.put(url,data,config);},delete:function _delete(url,config){return service.delete(url,config);}};// 复制代码\nexport default request;","map":{"version":3,"names":["axios","baseURL","getToken","service","create","timeout","withCredentials","ContentType","json","form","multipart","defaults","headers","post","put","pending","Map","addPending","config","url","method","join","cancelToken","CancelToken","cancel","has","set","removePending","get","delete","interceptors","request","use","Authorization","error","console","log","data","code","message","Promise","reject","response","status","resolve","isCancel","_delete"],"sources":["/Users/zhangyanjun/react-project/mail/src/client/index.tsx"],"sourcesContent":["// import Qs from 'qs'\r\nimport axios, {\r\n  AxiosInstance,\r\n  AxiosRequestConfig,\r\n  AxiosResponse,\r\n  InternalAxiosRequestConfig,\r\n} from 'axios'\r\n\r\nconst baseURL = '/api'\r\n/* 服务器返回数据的的类型，根据接口文档确定 */\r\nexport interface Result<T = unknown> {\r\n  code: number\r\n  message: string\r\n  data: T\r\n}\r\nfunction getToken() {\r\n  return 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyRXh0SW5mbyI6IntcIm1vYmlsZVwiOlwiMTMzMzMzMzMzMzNcIixcInRlbmFudElkXCI6XCIxMDAwXCIsXCJ1c2VyTmFtZVwiOlwidGVzdFwifSIsImV4cCI6MTY5OTQ0MjUwMiwidXNlcklkIjoiYWE5ZDljNTE3ZGRmMTFlZWI0MTdmYTE2M2U0Zjk0NjUifQ.35VkZ1q-hYEGCn0pLtb--vahOFbmxAjeU8M8rplJcYc'\r\n}\r\n// 创建axios实例\r\nconst service: AxiosInstance = axios.create({\r\n  baseURL,\r\n  timeout: 30000,\r\n  withCredentials: true,\r\n})\r\n\r\nconst ContentType = {\r\n  json: 'application/json;charset=utf-8', // json格式\r\n  form: 'application/x-www-form-urlencoded;charset=UTF-8', // 表单\r\n  multipart: 'multipart/form-data', // 文件上传\r\n}\r\n\r\n// service.defaults.headers.post['Content-Type'] = ContentType.form\r\nservice.defaults.headers.post['Content-Type'] = ContentType.json\r\nservice.defaults.headers.put['Content-Type'] = ContentType.json\r\n\r\n// 声明一个 Map 用于存储每个请求的标识 和 取消函数\r\nconst pending = new Map()\r\n/**\r\n * @description: 添加请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */\r\nconst addPending = (config: AxiosRequestConfig): void => {\r\n  const url = [config.baseURL, config.method, config.url].join('')\r\n  config.cancelToken = new axios.CancelToken((cancel) => {\r\n    if (!pending.has(url)) {\r\n      // 如果 pending 中不存在当前请求，则添加进去\r\n      pending.set(url, cancel)\r\n    }\r\n  })\r\n}\r\n/**\r\n * @description: 移除请求\r\n *   移除未响应完的相同请求，避免重复请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */\r\nconst removePending = (config: AxiosRequestConfig): void => {\r\n  const url = [config.baseURL, config.method, config.url].join('')\r\n  if (pending.has(url)) {\r\n    const cancel = pending.get(url)\r\n    cancel(url)\r\n    pending.delete(url)\r\n  }\r\n}\r\n\r\n/**\r\n * 请求拦截器\r\n */\r\nservice.interceptors.request.use(\r\n  (config: InternalAxiosRequestConfig) => {\r\n    removePending(config) // 在请求开始前，移除未响应完的相同请求，避免重复请求\r\n    addPending(config) // 将当前请求添加到 pending 中\r\n    // console.log('请求拦截器getToken:', getToken())\r\n    if (getToken()) {\r\n      config.headers.Authorization = getToken()\r\n    }\r\n    return config\r\n  },\r\n  (error) => {\r\n    console.log('请求异常', error)\r\n    // 错误抛到业务代码\r\n    error.data = {}\r\n    error.data.code = -1\r\n    error.data.message = '发送请求出现异常！'\r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\n/**\r\n * 响应拦截\r\n */\r\nservice.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    removePending(response) // 在请求结束后，移除本次请求\r\n    if (response.status === 200) {\r\n      // 请求结果正常\r\n      const { code } = response.data\r\n      // console.log(response, 'response.data')\r\n      if (code === 0) {\r\n        // 请求成功\r\n        return Promise.resolve(response.data.data)\r\n      } else {\r\n        // 请求异常处理\r\n\r\n        // 处理系统自定义异常\r\n        return Promise.reject(response.data)\r\n      }\r\n    } else {\r\n      console.log('响应请求异常', response)\r\n      return Promise.reject(response)\r\n    }\r\n  },\r\n  (error) => {\r\n    if (axios.isCancel(error)) {\r\n      // 重复请求的错误\r\n      // 中断promise\r\n      return new Promise(() => {})\r\n    }\r\n    console.log('响应请求出现异常！', error)\r\n    // 错误抛到业务代码\r\n    error.data = {}\r\n    error.data.code = -2\r\n    error.data.message = '响应请求出现异常！'\r\n    return Promise.reject(error.data)\r\n  },\r\n)\r\n/* 导出封装的请求方法 */\r\nexport const request = {\r\n  get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.get(url, config)\r\n  },\r\n\r\n  post<T>(url: string, data?: object, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.post(url, data, config)\r\n  },\r\n\r\n  put<T>(url: string, data?: object, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.put(url, data, config)\r\n  },\r\n\r\n  delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.delete(url, config)\r\n  },\r\n}\r\n// 复制代码\r\n\r\nexport default request\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}