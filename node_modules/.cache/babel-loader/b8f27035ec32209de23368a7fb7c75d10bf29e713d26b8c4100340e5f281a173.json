{"ast":null,"code":"// import Qs from 'qs'\nimport axios from 'axios';\nconst baseURL = '/api';\n/* 服务器返回数据的的类型，根据接口文档确定 */\n\nfunction getToken() {\n  return 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyRXh0SW5mbyI6IntcIm1vYmlsZVwiOlwiMTMzMzMzMzMzMzNcIixcInRlbmFudElkXCI6XCIxMDAwXCIsXCJ1c2VyTmFtZVwiOlwidGVzdFwifSIsImV4cCI6MTY5OTQ0MjUwMiwidXNlcklkIjoiYWE5ZDljNTE3ZGRmMTFlZWI0MTdmYTE2M2U0Zjk0NjUifQ.35VkZ1q-hYEGCn0pLtb--vahOFbmxAjeU8M8rplJcYc';\n}\n// 创建axios实例\nconst service = axios.create({\n  baseURL,\n  timeout: 30000,\n  withCredentials: true\n});\nconst ContentType = {\n  json: 'application/json;charset=utf-8',\n  // json格式\n  form: 'application/x-www-form-urlencoded;charset=UTF-8',\n  // 表单\n  multipart: 'multipart/form-data' // 文件上传\n};\n\n// service.defaults.headers.post['Content-Type'] = ContentType.form\nservice.defaults.headers.post['Content-Type'] = ContentType.json;\nservice.defaults.headers.put['Content-Type'] = ContentType.json;\n\n// 声明一个 Map 用于存储每个请求的标识 和 取消函数\nconst pending = new Map();\n/**\r\n * @description: 添加请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */\nconst addPending = config => {\n  const url = [config.baseURL, config.method, config.url].join('');\n  config.cancelToken = new axios.CancelToken(cancel => {\n    if (!pending.has(url)) {\n      // 如果 pending 中不存在当前请求，则添加进去\n      pending.set(url, cancel);\n    }\n  });\n};\n/**\r\n * @description: 移除请求\r\n *   移除未响应完的相同请求，避免重复请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */\nconst removePending = config => {\n  const url = [config.baseURL, config.method, config.url].join('');\n  if (pending.has(url)) {\n    const cancel = pending.get(url);\n    cancel(url);\n    pending.delete(url);\n  }\n};\n\n/**\r\n * 请求拦截器\r\n */\nservice.interceptors.request.use(config => {\n  removePending(config); // 在请求开始前，移除未响应完的相同请求，避免重复请求\n  addPending(config); // 将当前请求添加到 pending 中\n  // console.log('请求拦截器getToken:', getToken())\n  if (getToken()) {\n    config.headers.Authorization = getToken();\n  }\n  return config;\n}, error => {\n  console.log('请求异常', error);\n  // 错误抛到业务代码\n  error.data = {};\n  error.data.code = -1;\n  error.data.message = '发送请求出现异常！';\n  return Promise.reject(error);\n});\n\n/**\r\n * 响应拦截\r\n */\nservice.interceptors.response.use(response => {\n  removePending(response); // 在请求结束后，移除本次请求\n  if (response.status === 200) {\n    // 请求结果正常\n    const {\n      code\n    } = response.data;\n    console.log(response, 'response.data');\n    if (code === 0) {\n      // 请求成功\n      return Promise.resolve(response.data.data);\n    } else {\n      // 请求异常处理\n\n      // 处理系统自定义异常\n      return Promise.reject(response.data);\n    }\n  } else {\n    console.log('响应请求异常', response);\n    return Promise.reject(response);\n  }\n}, error => {\n  if (axios.isCancel(error)) {\n    // 重复请求的错误\n    // 中断promise\n    return new Promise(() => {});\n  }\n  console.log('响应请求出现异常！', error);\n  // 错误抛到业务代码\n  error.data = {};\n  error.data.code = -2;\n  error.data.message = '响应请求出现异常！';\n  return Promise.reject(error.data);\n});\n/* 导出封装的请求方法 */\nexport const request = {\n  get(url, config) {\n    return service.get(url, config);\n  },\n  post(url, data, config) {\n    return service.post(url, data, config);\n  },\n  put(url, data, config) {\n    return service.put(url, data, config);\n  },\n  delete(url, config) {\n    return service.delete(url, config);\n  }\n};\n// 复制代码\n\nexport default request;","map":{"version":3,"names":["axios","baseURL","getToken","service","create","timeout","withCredentials","ContentType","json","form","multipart","defaults","headers","post","put","pending","Map","addPending","config","url","method","join","cancelToken","CancelToken","cancel","has","set","removePending","get","delete","interceptors","request","use","Authorization","error","console","log","data","code","message","Promise","reject","response","status","resolve","isCancel"],"sources":["/Users/zhangyanjun/react-project/mail/src/client/index.tsx"],"sourcesContent":["// import Qs from 'qs'\r\nimport axios, {\r\n  AxiosInstance,\r\n  AxiosRequestConfig,\r\n  AxiosResponse,\r\n  InternalAxiosRequestConfig,\r\n} from 'axios'\r\n\r\nconst baseURL = '/api'\r\n/* 服务器返回数据的的类型，根据接口文档确定 */\r\nexport interface Result<T = unknown> {\r\n  code: number\r\n  message: string\r\n  data: T\r\n}\r\nfunction getToken() {\r\n  return 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyRXh0SW5mbyI6IntcIm1vYmlsZVwiOlwiMTMzMzMzMzMzMzNcIixcInRlbmFudElkXCI6XCIxMDAwXCIsXCJ1c2VyTmFtZVwiOlwidGVzdFwifSIsImV4cCI6MTY5OTQ0MjUwMiwidXNlcklkIjoiYWE5ZDljNTE3ZGRmMTFlZWI0MTdmYTE2M2U0Zjk0NjUifQ.35VkZ1q-hYEGCn0pLtb--vahOFbmxAjeU8M8rplJcYc'\r\n}\r\n// 创建axios实例\r\nconst service: AxiosInstance = axios.create({\r\n  baseURL,\r\n  timeout: 30000,\r\n  withCredentials: true,\r\n})\r\n\r\nconst ContentType = {\r\n  json: 'application/json;charset=utf-8', // json格式\r\n  form: 'application/x-www-form-urlencoded;charset=UTF-8', // 表单\r\n  multipart: 'multipart/form-data', // 文件上传\r\n}\r\n\r\n// service.defaults.headers.post['Content-Type'] = ContentType.form\r\nservice.defaults.headers.post['Content-Type'] = ContentType.json\r\nservice.defaults.headers.put['Content-Type'] = ContentType.json\r\n\r\n// 声明一个 Map 用于存储每个请求的标识 和 取消函数\r\nconst pending = new Map()\r\n/**\r\n * @description: 添加请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */\r\nconst addPending = (config: AxiosRequestConfig): void => {\r\n  const url = [config.baseURL, config.method, config.url].join('')\r\n  config.cancelToken = new axios.CancelToken((cancel) => {\r\n    if (!pending.has(url)) {\r\n      // 如果 pending 中不存在当前请求，则添加进去\r\n      pending.set(url, cancel)\r\n    }\r\n  })\r\n}\r\n/**\r\n * @description: 移除请求\r\n *   移除未响应完的相同请求，避免重复请求\r\n * @param {AxiosRequestConfig} config\r\n * @return {*}\r\n */\r\nconst removePending = (config: AxiosRequestConfig): void => {\r\n  const url = [config.baseURL, config.method, config.url].join('')\r\n  if (pending.has(url)) {\r\n    const cancel = pending.get(url)\r\n    cancel(url)\r\n    pending.delete(url)\r\n  }\r\n}\r\n\r\n/**\r\n * 请求拦截器\r\n */\r\nservice.interceptors.request.use(\r\n  (config: InternalAxiosRequestConfig) => {\r\n    removePending(config) // 在请求开始前，移除未响应完的相同请求，避免重复请求\r\n    addPending(config) // 将当前请求添加到 pending 中\r\n    // console.log('请求拦截器getToken:', getToken())\r\n    if (getToken()) {\r\n      config.headers.Authorization = getToken()\r\n    }\r\n    return config\r\n  },\r\n  (error) => {\r\n    console.log('请求异常', error)\r\n    // 错误抛到业务代码\r\n    error.data = {}\r\n    error.data.code = -1\r\n    error.data.message = '发送请求出现异常！'\r\n    return Promise.reject(error)\r\n  },\r\n)\r\n\r\n/**\r\n * 响应拦截\r\n */\r\nservice.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    removePending(response) // 在请求结束后，移除本次请求\r\n    if (response.status === 200) {\r\n      // 请求结果正常\r\n      const { code } = response.data\r\n      console.log(response, 'response.data')\r\n      if (code === 0) {\r\n        // 请求成功\r\n        return Promise.resolve(response.data.data)\r\n      } else {\r\n        // 请求异常处理\r\n\r\n        // 处理系统自定义异常\r\n        return Promise.reject(response.data)\r\n      }\r\n    } else {\r\n      console.log('响应请求异常', response)\r\n      return Promise.reject(response)\r\n    }\r\n  },\r\n  (error) => {\r\n    if (axios.isCancel(error)) {\r\n      // 重复请求的错误\r\n      // 中断promise\r\n      return new Promise(() => {})\r\n    }\r\n    console.log('响应请求出现异常！', error)\r\n    // 错误抛到业务代码\r\n    error.data = {}\r\n    error.data.code = -2\r\n    error.data.message = '响应请求出现异常！'\r\n    return Promise.reject(error.data)\r\n  },\r\n)\r\n/* 导出封装的请求方法 */\r\nexport const request = {\r\n  get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.get(url, config)\r\n  },\r\n\r\n  post<T>(url: string, data?: object, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.post(url, data, config)\r\n  },\r\n\r\n  put<T>(url: string, data?: object, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.put(url, data, config)\r\n  },\r\n\r\n  delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\r\n    return service.delete(url, config)\r\n  },\r\n}\r\n// 复制代码\r\n\r\nexport default request\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}